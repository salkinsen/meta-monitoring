---
# Source: jaeger/templates/agent-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger-agent
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: agent
automountServiceAccountToken: false
---
# Source: jaeger/templates/collector-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger-collector
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: collector
automountServiceAccountToken: false
---
# Source: jaeger/templates/query-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger-query
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query
automountServiceAccountToken: false
---
# Source: jaeger/templates/agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: agent
spec:
  ports:
  - name: zipkin-compact
    port: 5775
    protocol: UDP
    targetPort: zipkin-compact
  - name: jaeger-compact
    port: 6831
    protocol: UDP
    targetPort: jaeger-compact
  - name: jaeger-binary
    port: 6832
    protocol: UDP
    targetPort: jaeger-binary
  - name: http
    port: 5778
    protocol: TCP
    targetPort: http
  - name: admin
    port: 14271
    protocol: TCP
    targetPort: admin
  type: ClusterIP
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/component: agent
  topologyKeys:
  - "kubernetes.io/hostname"
---
# Source: jaeger/templates/collector-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: collector
spec:
  ports:
  - name: grpc
    port: 14250
    protocol: TCP
    targetPort: grpc
  - name: http
    port: 14268
    protocol: TCP
    targetPort: http
  - name: admin
    port: 14269
    targetPort: admin
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/component: collector
  type: ClusterIP
---
# Source: jaeger/templates/query-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query
spec:
  ports:
  - name: query
    port: 80
    protocol: TCP
    targetPort: query
  - name: admin
    port: 16687
    protocol: TCP
    targetPort: admin
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/component: query
  type: ClusterIP
---
# Source: jaeger/templates/agent-ds.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/component: agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/component: agent
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: layer
                operator: NotIn
                values:
                - meta-monitoring
      securityContext:
        {}
      dnsPolicy: ClusterFirst
      serviceAccountName: jaeger-agent
      containers:
      - name: jaeger-agent
        securityContext:
          {}
        image: jaegertracing/jaeger-agent:1.22.0
        imagePullPolicy: IfNotPresent
        args:
        env:
          - name: REPORTER_GRPC_HOST_PORT
            value: jaeger-collector:14250
        ports:
        - name: zipkin-compact
          containerPort: 5775
          protocol: UDP
        - name: jaeger-compact
          containerPort: 6831
          protocol: UDP
        - name: jaeger-binary
          containerPort: 6832
          protocol: UDP
        - name: http
          containerPort: 5778
          protocol: TCP
        - name: admin
          containerPort: 14271
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: admin
        readinessProbe:
          httpGet:
            path: /
            port: admin
        resources:
          {}
        volumeMounts:
      volumes:
---
# Source: jaeger/templates/collector-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/component: collector
  template:
    metadata:
      annotations:
        checksum/config-env: 75a11da44c802486bc6f65640aa48a730f0f684c5c07a42ba3cd1735eb3fb070
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/component: collector
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: layer
                operator: NotIn
                values:
                - meta-monitoring
      securityContext:
        {}
      serviceAccountName: jaeger-collector
      containers:
      - name: jaeger-collector
        securityContext:
          {}
        image: jaegertracing/jaeger-collector:1.22.0
        imagePullPolicy: IfNotPresent
        args:
          
        env:
          - name: SPAN_STORAGE_TYPE
            value: elasticsearch
          - name: ES_SERVER_URLS
            value: http://elasticsearch-master:9200
          - name: ES_USERNAME
            value: elastic
          - name: ES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: jaeger-elasticsearch
                key: password
        ports:
        - containerPort: 14250
          name: grpc
          protocol: TCP
        - containerPort: 14268
          name: http
          protocol: TCP
        - containerPort: 14269
          name: admin
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: admin
        livenessProbe:
          httpGet:
            path: /
            port: admin
        resources:
          {}
        volumeMounts:
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
---
# Source: jaeger/templates/query-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/component: query
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/component: query
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: layer
                operator: NotIn
                values:
                - meta-monitoring
      securityContext:
        {}
      serviceAccountName: jaeger-query
      containers:
      - name: jaeger-query
        securityContext:
          {}
        image: jaegertracing/jaeger-query:1.22.0
        imagePullPolicy: IfNotPresent
        args: ["--query.max-clock-skew-adjustment", "2s"]
          
        env:
          - name: SPAN_STORAGE_TYPE
            value: elasticsearch
          - name: ES_SERVER_URLS
            value: http://elasticsearch-master:9200
          - name: ES_USERNAME
            value: elastic
          - name: ES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: jaeger-elasticsearch
                key: password
          - name: JAEGER_AGENT_PORT
            value: "6831"
        ports:
        - name: query
          containerPort: 16686
          protocol: TCP
        - name: admin
          containerPort: 16687
          protocol: TCP
        resources:
          {}
        volumeMounts:
        livenessProbe:
          httpGet:
            path: /
            port: admin
        readinessProbe:
          httpGet:
            path: /
            port: admin
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
---
# Source: jaeger/templates/elasticsearch-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jaeger-elasticsearch
  labels:
    helm.sh/chart: jaeger-0.46.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/version: "1.22.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/resource-policy": keep
type: Opaque
data:
  password: "Y2hhbmdlbWU="
